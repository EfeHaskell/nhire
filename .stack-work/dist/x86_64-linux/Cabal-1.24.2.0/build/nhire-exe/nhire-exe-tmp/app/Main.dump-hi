
==================== FINAL INTERFACE ====================
2017-06-04 18:37:19.094738 UTC

interface main@main:Main 8002
  interface hash: 20be9e1edfbdcefe4e73beb91aa852a5
  ABI hash: dd9963146064fee590fe298e25c6b845
  export-list hash: aa1cb1fed099ad2304cbb5931c6613d2
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 764e50b36e2e3ee5acae0d81ebf2a73f
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.aggregateAndLog
  Main.keepMainProgramAlive
  Main.main
  Main.replayCsv
module dependencies: Paths_nhire
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      exceptions-0.8.3@exceptions-0.8.3-ADEDRATtUrMK1JW4zMQ9U
                      filepath-1.4.1.1@filepath-1.4.1.1
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      mmorph-1.0.9@mmorph-1.0.9-5bASEvmIkr5CpdAYXwPsn0
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      nhire-0.1.0.0@nhire-0.1.0.0-ICMHthDixsK7WtvFeupBAd
                      pipes-4.3.4@pipes-4.3.4-IzZdzyWEw6TEBmgi7OaP91
                      regex-base-0.93.2@regex-base-0.93.2-AYjYAsBidAc8f5XNm9b2Aa
                      regex-compat-0.95.1@regex-compat-0.95.1-7IGKoiHTSKL3opdpEZ0pO8
                      regex-posix-0.95.2@regex-posix-0.95.2-KQJt29lnRa45d6bFn9XkFO
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      template-haskell-2.11.1.0 time-1.6.0.1@time-1.6.0.1
                      transformers-0.5.2.0@transformers-0.5.2.0 unix-2.7.2.1@unix-2.7.2.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         regex-base-0.93.2@regex-base-0.93.2-AYjYAsBidAc8f5XNm9b2Aa:Text.Regex.Base.Context
         regex-posix-0.95.2@regex-posix-0.95.2-KQJt29lnRa45d6bFn9XkFO:Text.Regex.Posix.ByteString
         regex-posix-0.95.2@regex-posix-0.95.2-KQJt29lnRa45d6bFn9XkFO:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2@regex-posix-0.95.2-KQJt29lnRa45d6bFn9XkFO:Text.Regex.Posix.Sequence
         regex-posix-0.95.2@regex-posix-0.95.2-KQJt29lnRa45d6bFn9XkFO:Text.Regex.Posix.String
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Compose base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.List.NonEmpty
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Semigroup
                         base-4.9.1.0:Data.Type.Equality base-4.9.1.0:Data.Version
                         base-4.9.1.0:Data.Void base-4.9.1.0:GHC.Exts
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
import  -/  base-4.9.1.0:Control.Concurrent 2ee6a0a58489520b9a96d8fef10380fa
import  -/  base-4.9.1.0:Control.Concurrent.Chan 1fe7f9b5e83f172945517098fa943ef0
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Control.Monad.IO.Class 1a4384f66ee999caf5366398edb6ca7b
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.IORef 71c87b0b25a8bca3e3f4497725f5e543
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.Traversable 556020d7cf3c4a34a774600512918a37
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Conc.IO b2bbbe01493966b84e9d1ea7f978ed53
import  -/  base-4.9.1.0:GHC.Conc.Sync 8d0a228e5fc4d8c110495066f4d52ea1
import  -/  base-4.9.1.0:GHC.IO eb504c57b397cf133849f8586f15dafb
import  -/  base-4.9.1.0:GHC.IO.Handle ba98a5b34d78cbf48b41fe58a3735c69
import  -/  base-4.9.1.0:GHC.IO.Handle.FD dbf0d0d4f42ab1465129a88ccf7880ff
import  -/  base-4.9.1.0:GHC.IO.Handle.Text b65719f3b262b071ab1aabeb72fc9d8b
import  -/  base-4.9.1.0:GHC.IO.Handle.Types 17aa0e2ab137800e3a31992d780c071f
import  -/  base-4.9.1.0:GHC.IO.IOMode 2f5782f93b12a0d860d6d661b9fb405c
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.Environment 08cb808e8e6a7821e6f8cfa76a977431
import  -/  base-4.9.1.0:System.IO e4a64a8e3dce8616da54f0ee7104f7db
import  -/  directory-1.3.0.0@directory-1.3.0.0:System.Directory 8ff5ebd6a93811413df021d2be39a158
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  Paths_nhire 4ab025dc9b770d57301decb7f2d5886b
  exports: 9fe8fb92845c8ab14e6b94b10f458f87
  getDataDir d7d3f312208e3ec39f7e7f4f404265c2
import  -/  nhire-0.1.0.0@nhire-0.1.0.0-ICMHthDixsK7WtvFeupBAd:Order f1a14ba56be0f10317274e09fd31d825
import  -/  pipes-4.3.4@pipes-4.3.4-IzZdzyWEw6TEBmgi7OaP91:Pipes 3518ad83bd5317d3e45aa88cf10bd2e1
import  -/  pipes-4.3.4@pipes-4.3.4-IzZdzyWEw6TEBmgi7OaP91:Pipes.Core a79db7c766759116989a847d928d55fe
import  -/  pipes-4.3.4@pipes-4.3.4-IzZdzyWEw6TEBmgi7OaP91:Pipes.Internal 29d44024ead075263b40ad2c7bdb6a5f
import  -/  pipes-4.3.4@pipes-4.3.4-IzZdzyWEw6TEBmgi7OaP91:Pipes.Prelude 58f5c8bb46600df3cf146d246aee4fba
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time 2005a60506050a7089ec50a535292ccc
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.Clock.POSIX d107248af877060d00321d9c66f5a2b1
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.Clock.UTC a11128e40404d4167f29d45f57b1b0af
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.Clock.UTCDiff d9518d0691cef9c7d8de03406284b7c2
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Class 45530f1305724ee3931a9be21b40ca7e
7360e9b906f51357d7ff6fb935c19105
  $srunEffect2 ::
    Pipes.Internal.Proxy
      Pipes.Internal.X () () Pipes.Internal.X GHC.Types.IO r
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, r #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,U> -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
d3c69a556ae28bfdfdbfc006aaa585d3
  $wkeepMainProgramAlive ::
    GHC.Prim.MVar#
      GHC.Prim.RealWorld (Control.Concurrent.Chan.Stream GHC.Types.Int)
    -> GHC.Prim.MVar#
         GHC.Prim.RealWorld (Control.Concurrent.Chan.Stream GHC.Types.Int)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <S,U><S,U><S,U>, Inline: [0] -}
64cc269f9122b73473f200ebe2296ea9
  $wpumpOrder ::
    GHC.IO.Handle.Types.Handle
    -> Data.Time.Clock.UTC.UTCTime
    -> (# GHC.Types.IO
            (Pipes.Internal.Proxy x' x () Order.Order GHC.Types.IO ()) #)
  {- Arity: 2, Strictness: <L,U><L,U(U,U)>, Inline: [0] -}
98a10a33714eafb33421e444b065e94b
  $wreplayCsv ::
    GHC.IO.FilePath
    -> (# GHC.Types.IO
            (Pipes.Internal.Proxy
               Pipes.Internal.X () () Order.Order GHC.Types.IO ()) #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.IO.FilePath) ->
                 (# (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case GHC.IO.Handle.FD.openFile1
                            w
                            GHC.IO.IOMode.ReadMode
                            s of ds1 { (#,#) ipv ipv1 ->
                     (# ipv,
                        let {
                          lvl14 :: GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         Pipes.Internal.Proxy
                                           Data.Void.Void () () Order.Order GHC.Types.IO () #)
                            {- Arity: 1, Strictness: <S,U>,
                               Unfolding: InlineRule (1, True, False)
                                          (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                           case GHC.IO.Handle.hClose1
                                                  ipv1
                                                  s1 of ds2 { (#,#) ipv2 ipv3 ->
                                           (# ipv2,
                                              Pipes.Internal.Pure
                                                @ Data.Void.Void
                                                @ ()
                                                @ ()
                                                @ Order.Order
                                                @ GHC.Types.IO
                                                @ ()
                                                ipv3 #) }) -}
                          = \ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                            case GHC.IO.Handle.hClose1 ipv1 s1 of ds2 { (#,#) ipv2 ipv3 ->
                            (# ipv2,
                               Pipes.Internal.Pure
                                 @ Data.Void.Void
                                 @ ()
                                 @ ()
                                 @ Order.Order
                                 @ GHC.Types.IO
                                 @ ()
                                 ipv3 #) }
                        } in
                        let {
                          lvl15 :: Pipes.Internal.Proxy
                                     Pipes.Internal.X () () Order.Order GHC.Types.IO ()
                          = Pipes.Internal.M
                              @ Data.Void.Void
                              @ ()
                              @ ()
                              @ Order.Order
                              @ GHC.Types.IO
                              @ ()
                              lvl14
                                `cast`
                              (Sym (GHC.Types.N:IO[0]
                                        <Pipes.Internal.Proxy
                                           Data.Void.Void () () Order.Order GHC.Types.IO ()>_R))
                        } in
                        Pipes.Internal.M
                          @ Data.Void.Void
                          @ ()
                          @ ()
                          @ Order.Order
                          @ GHC.Types.IO
                          @ ()
                          (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                           case Data.Time.Clock.CTimeval.getCTimeval1
                                  s1 of ds { (#,#) ipv2 ipv3 ->
                           (# ipv2,
                              case Main.$wpumpOrder
                                     @ Pipes.Internal.X
                                     @ ()
                                     ipv1
                                     (case Data.Time.Clock.POSIX.$wposixSecondsToUTCTime
                                             (Data.Time.Clock.POSIX.getCurrentTime2
                                                ipv3) of ww { (#,#) ww1 ww2 ->
                                      Data.Time.Clock.UTC.UTCTime ww1 ww2 }) of ww { Unit# ww1 ->
                              Pipes.Internal.M
                                @ Data.Void.Void
                                @ ()
                                @ ()
                                @ Order.Order
                                @ GHC.Types.IO
                                @ ()
                                (\ (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 case ww1
                                        `cast`
                                      (GHC.Types.N:IO[0]
                                           <Pipes.Internal.Proxy
                                              Data.Void.Void () () Order.Order GHC.Types.IO ()>_R)
                                        s2 of ds2 { (#,#) ipv4 ipv5 ->
                                 (# ipv4,
                                    Pipes.Internal._bind
                                      @ GHC.Types.IO
                                      @ Data.Void.Void
                                      @ ()
                                      @ ()
                                      @ Order.Order
                                      @ ()
                                      @ ()
                                      GHC.Base.$fMonadIO
                                      ipv5
                                      (\ (ds3 :: ()) -> lvl15) #) })
                                  `cast`
                                (Sym (GHC.Types.N:IO[0]
                                          <Pipes.Internal.Proxy
                                             Data.Void.Void
                                             ()
                                             ()
                                             Order.Order
                                             GHC.Types.IO
                                             ()>_R)) } #) })
                            `cast`
                          (Sym (GHC.Types.N:IO[0]
                                    <Pipes.Internal.Proxy
                                       Data.Void.Void () () Order.Order GHC.Types.IO ()>_R)) #) })
                      `cast`
                    (Sym (GHC.Types.N:IO[0]
                              <Pipes.Internal.Proxy
                                 Data.Void.Void () () Order.Order GHC.Types.IO ()>_R)) #)) -}
fbf217996a0bd7860ed4392d49105fb8
  aggregateAndLog ::
    [Pipes.Core.Producer Order.Order GHC.Types.IO ()]
    -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.aggregateAndLog1
                  `cast`
                (<[Pipes.Core.Producer Order.Order GHC.Types.IO ()]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
eae694c129157441a0739d74a7fa9347
  aggregateAndLog1 ::
    [Pipes.Core.Producer Order.Order GHC.Types.IO ()]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (orderProducers :: [Pipes.Core.Producer
                                         Order.Order GHC.Types.IO ()])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newMVar#
                        @ GHC.Prim.RealWorld
                        @ (Control.Concurrent.Chan.ChItem GHC.Types.Int)
                        eta of ds { (#,#) ipv ipv1 ->
                 case GHC.Prim.newMVar#
                        @ GHC.Prim.RealWorld
                        @ (GHC.MVar.MVar (Control.Concurrent.Chan.ChItem GHC.Types.Int))
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 let {
                   hole :: GHC.MVar.MVar
                             (Control.Concurrent.Chan.ChItem GHC.Types.Int)
                     {- Strictness: m -}
                   = GHC.MVar.MVar
                       @ (Control.Concurrent.Chan.ChItem GHC.Types.Int)
                       ipv1
                 } in
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ (GHC.MVar.MVar (Control.Concurrent.Chan.ChItem GHC.Types.Int))
                        ipv3
                        hole
                        ipv2 of s2# { DEFAULT ->
                 case GHC.Prim.newMVar#
                        @ GHC.Prim.RealWorld
                        @ (GHC.MVar.MVar (Control.Concurrent.Chan.ChItem GHC.Types.Int))
                        s2# of ds2 { (#,#) ipv4 ipv5 ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ (GHC.MVar.MVar (Control.Concurrent.Chan.ChItem GHC.Types.Int))
                        ipv5
                        hole
                        ipv4 of s2#1 { DEFAULT ->
                 case Control.Concurrent.Chan.$wwriteChan
                        @ GHC.Types.Int
                        ipv3
                        ipv5
                        (case GHC.List.$wlenAcc
                                @ (Pipes.Internal.Proxy
                                     Pipes.Internal.X () () Order.Order GHC.Types.IO ())
                                orderProducers
                                0# of ww2 { DEFAULT ->
                         GHC.Types.I# ww2 })
                        s2#1 of ds4 { (#,#) ipv7 ipv8 ->
                 case GHC.Prim.fork#
                        @ (GHC.Types.IO ())
                        (\ (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         GHC.Prim.catch#
                           @ ()
                           @ GHC.Exception.SomeException
                           (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                            case Main.$srunEffect2
                                   @ ()
                                   (Main.aggregateAndLog_go
                                      (GHC.List.$w!!
                                         @ (Pipes.Core.Producer Order.Order GHC.Types.IO ())
                                         orderProducers
                                         0#))
                                   s of ds5 { (#,#) ipv9 ipv10 ->
                            Control.Concurrent.Chan.$wwriteChan
                              @ GHC.Types.Int
                              ipv3
                              ipv5
                              Main.aggregateAndLog2
                              ipv9 })
                           GHC.Conc.Sync.childHandler1
                           eta1)
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <()>_R))
                        ipv7 of ds5 { (#,#) ipv9 ipv10 ->
                 Main.$wkeepMainProgramAlive ipv3 ipv5 ipv9 } } } } } } }) -}
c7b2bbac7968cfb5408a418f6223c4a5
  aggregateAndLog2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
e4f227acd15f51a4b47aef1b6c216399
  aggregateAndLog_go ::
    Pipes.Internal.Proxy
      Pipes.Internal.X () () Order.Order GHC.Types.IO ()
    -> Pipes.Internal.Proxy
         Pipes.Internal.X () () Pipes.Internal.X GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,1*U> -}
b759abf3ce1bace6b67c5cac00640f15
  keepMainProgramAlive ::
    Control.Concurrent.Chan.Chan GHC.Types.Int -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(SS),1*U(U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.keepMainProgramAlive1
                  `cast`
                (<Control.Concurrent.Chan.Chan GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
d6a4270c0c3f4765c03d91c8573a0fe2
  keepMainProgramAlive1 ::
    Control.Concurrent.Chan.Chan GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(SS),1*U(U,U)><S,U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Control.Concurrent.Chan.Chan GHC.Types.Int)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Control.Concurrent.Chan.Chan ww1 ww2 ->
                 Main.$wkeepMainProgramAlive ww1 ww2 w1 }) -}
2d129a7bf2bbce78ba72008ad633c383
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
8fc17f410cd81396f32d1c4bec386823
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Paths_nhire.getDataDir
                        `cast`
                      (GHC.Types.N:IO[0] <GHC.IO.FilePath>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case System.Environment.getArgs1 ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.List.$wlenAcc @ [GHC.Types.Char] ipv3 0# of ww2 {
                   DEFAULT -> (# ipv2, GHC.Tuple.() #)
                   3#
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Main.main5
                             GHC.Types.True
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      let {
                        fileNamesFullPaths :: [[GHC.Types.Char]]
                        = GHC.Base.map
                            @ [GHC.Types.Char]
                            @ [GHC.Types.Char]
                            (GHC.Base.++
                               @ GHC.Types.Char
                               (GHC.Base.++ @ GHC.Types.Char ipv1 Main.main4))
                            ipv3
                      } in
                      case Main.main3 fileNamesFullPaths ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                      case (Main.main_go ipv7) `cast` (Data.Monoid.N:All[0]) of wild {
                        GHC.Types.False -> (# ipv6, GHC.Tuple.() #)
                        GHC.Types.True
                        -> case GHC.IO.Handle.Text.hPutStr2
                                  GHC.IO.Handle.FD.stdout
                                  Main.main2
                                  GHC.Types.True
                                  ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                           Main.aggregateAndLog1
                             (GHC.Base.map
                                @ [GHC.Types.Char]
                                @ (Pipes.Internal.Proxy
                                     Pipes.Internal.X () () Order.Order GHC.Types.IO ())
                                Main.replayCsv
                                fileNamesFullPaths)
                             ipv8 } } } } } } }) -}
a1376a8d5676fcb94a2fb0cd9a675bbd
  main2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "All input csv files exist. Processing will begin!\n"#) -}
e73f54c03539ee084d9b4dfaf4d0acad
  main3 ::
    [GHC.IO.FilePath]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Bool] #)
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
0d6084c2b0bd3fe38bc91105320ecef0
  main4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "/"#) -}
8dc7336eb81a4226e62200c03f76252b
  main5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Three input csv file names specified!\n"#) -}
8fd2a42411efef1204680df703e53181
  main6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
6e100225bf90be1df845887c0db9e7ed
  main_go :: [GHC.Types.Bool] -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
abf770950dbc248b1fa44582a82a69f4
  replayCsv ::
    GHC.IO.FilePath -> Pipes.Core.Producer Order.Order GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>m3, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.IO.FilePath) ->
                 case Main.$wreplayCsv w of ww { Unit# ww1 ->
                 Pipes.Internal.M
                   @ Pipes.Internal.X
                   @ ()
                   @ ()
                   @ Order.Order
                   @ GHC.Types.IO
                   @ ()
                   ww1 }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

